allprojects {
    apply plugin: 'java-library'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    group = 'be.isach'
    version = '2.5.11-DEVELOPMENT'

    compileJava.options.encoding = 'UTF-8'

    java {
        toolchain {
            // minimum Java version to compile all subprojects
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    configurations {
        shaded
        compile.extendsFrom shaded
    }

    processResources {
        inputs.property("version", project.version)

        filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                'VERSION': project.version.split('-')[0]
        ]
    }

    afterEvaluate {
        jar {
            dependsOn configurations.shaded
            from configurations.shaded.collect {
                it.isDirectory() ?
                        it :
                        zipTree(it)
            }
        }
    }
}

// Useful for local testing, with a testserver folder containing your testing server
boolean local = false
if (local) libsDirName = '../testserver/plugins'


abstract class VersionedJarTask extends Jar {
    @Inject
    public VersionedJarTask(int mcVersion) {
        archiveBaseName = project.objects.property(String.class).value('UltraCosmetics-1.' + mcVersion.toString())
        def versionProjects = project.subprojects.findAll { it.name.startsWith("v1_" + mcVersion.toString() + "_") || it.name.equals("core") }
        versionProjects.each {
            dependsOn(":$it.name:compileJava")
        }
        from (project.files(versionProjects.collect { it.sourceSets.main.output }))
    }
}

final MIN_MC_VERSION = 8
final MAX_MC_VERSION = 17

for (int i = MIN_MC_VERSION; i <= MAX_MC_VERSION; i++) {
    tasks.register("jar1" + i.toString(), VersionedJarTask, i)
}

subprojects.each {
    if (!it.hasProperty("remapMcVersion")) return
    tasks.register("obf" + it.name, VersionedObfTask, it)
}

dependencies {
    subprojects.each { p ->
        shaded(p) {
            transitive false
        }
    }
}

subprojects { subproj ->
    repositories {
        mavenLocal()
        mavenCentral()

        maven {
            url 'https://repo.isach.be'
        }

        // Lib's Disguises
        maven {
            url 'https://repo.md-5.net/content/groups/public/'
        }

        maven {
            url 'https://repo.aikar.co/nexus/content/groups/aikar'
        }

        // BungeeCord
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
        }

        // PlaceholderAPI
        maven {
            url 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
        }

        // PlayerPoints
        maven {
            url 'https://repo.rosewooddev.io/repository/public/'
        }
        
        // Spigot for 1.16.4
        maven {
            url = 'https://oss.sonatype.org/content/repositories/snapshots'
        }
        maven {
            url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        }

        // WorldGuard
        maven {
            url "https://maven.enginehub.org/repo/"
        }

        // Vault
        maven {
            url 'https://jitpack.io'
        }
    }
    def version = 8
    if (subproj.hasProperty("javaVersion")) {
        version = subproj.property("javaVersion")
    }
    subproj.tasks.withType(JavaCompile).configureEach {
        javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(version)
        }
    }
}

abstract class VersionedObfTask extends DefaultTask {
    private Project subproj;
    @Inject
    public VersionedObfTask(Project subproj) {
        this.subproj = subproj
        dependsOn 'jar'
        description 'Generates an obfuscated version of the jar for use with Spigot.'
        group = 'jar preparation'
        ext.toolingDir = System.getProperty("user.dir")
        ext.homeDir = project.gradle.gradleUserHomeDir.parent
    }
    @TaskAction
    def go() {
        def nms = subproj.name
        def mcVer = subproj.getProperty("remapMcVersion")
        project.exec {
            workingDir project.buildDir
            commandLine 'java', '-cp', ext.toolingDir + '/tooling/specialsource/SpecialSource.jar' + File.pathSeparator + ext.homeDir + "/.m2/repository/org/spigotmc/spigot/$mcVer-R0.1-SNAPSHOT/spigot-$mcVer-R0.1-SNAPSHOT-remapped-mojang.jar",
                'net.md_5.specialsource.SpecialSource', '--live', '--only', "be/isach/ultracosmetics/$nms", '-q',
                '-i', 'libs/' + project.name + '-' + project.version + '.jar',
                '-o', 'libs/' + project.name + '-' + project.version + '-obf.jar',
                '-m', ext.homeDir + "/.m2/repository/org/spigotmc/minecraft-server/$mcVer-R0.1-SNAPSHOT/minecraft-server-$mcVer-R0.1-SNAPSHOT-maps-mojang.txt",
                '--reverse'
        }
        project.exec {
            workingDir project.buildDir
            commandLine 'java', '-cp', ext.toolingDir + '/tooling/specialsource/SpecialSource.jar' + File.pathSeparator + ext.homeDir + "/.m2/repository/org/spigotmc/spigot/$mcVer-R0.1-SNAPSHOT/spigot-$mcVer-R0.1-SNAPSHOT-remapped-obf.jar",
                'net.md_5.specialsource.SpecialSource', '--live', '--only', "be/isach/ultracosmetics/$nms", '-q',
                '-i', 'libs/' + project.name + '-' + project.version + '-obf.jar',
                '-o', 'libs/' + project.name + '-' + project.version + '.jar',
                '-m', ext.homeDir + "/.m2/repository/org/spigotmc/minecraft-server/$mcVer-R0.1-SNAPSHOT/minecraft-server-$mcVer-R0.1-SNAPSHOT-maps-spigot.csrg"
        }
    }
}
tasks.register("obfuscate") {
    dependsOn tasks.withType(VersionedObfTask)
    group = 'jar preparation'
}
